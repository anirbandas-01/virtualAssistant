# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?


import React, { useContext, useState } from 'react'
import { useNavigate  } from 'react-router-dom';
import bg from "../assets/authBg.png"
import { FaEye } from "react-icons/fa";
import { LuEyeClosed } from "react-icons/lu";
import { UserDataContext } from '../context/UserContext.jsx';
import axios from 'axios'
import SignIn from './SignIn';

function SignUp() {
 
  const [showPassword, setShowPassword ] =  useState(false);
  
  const {serverUrl,userData, setUserData} = useContext(UserDataContext)

  const navigate = useNavigate()
  
  const [name, setName]= useState("")
  const [email, setEmail]= useState("")
  const [password, setPassword]= useState("")
  const [loading, setLoading]= useState(false)
  const [err, setErr] = useState("")

  const handleSignUp = async (e) => {
    e.preventDefault()
    setErr("")
    setLoading(true)
    
    if( password.length < 6 ){
      setErr("password must be at-least 6 characters");
      return;
    }
    
    try {

       const result = await axios.post(
        `${serverUrl}/api/v1/auth/signup`,
        {fullName:name, email, password},
        {withCredentials: true});

         setUserData(result.data);
         setLoading(false);
         navigate("/customize")
      } catch (error) {
          
          console.log(error);
          setUserData(null)
          setLoading(false)
          setErr(error?.response?.data?.message || "Something went wrong. Try again.")
    }
  };

  return (
    <div className='w-full h-[100vh] bg-cover flex justify-center items-center' 
      style={{backgroundImage: `url(${bg})`}}>

     <form className='w-[90%] h-[600px] max-w-[500px] bg-[#0000003d] backdrop-blur-md shadow-lg shadow-black flex flex-col items-center justify-center gap-[20px] px-[20px]'
      onSubmit={handleSignUp}>

      <h1 className='text-white text-[30px] font-semibold mb-[30px]'> 
        Register to
        <span className='text-blue-400'> Virtual Assistant</span>  
        </h1>
         
        <input type='text' placeholder='Enter Your Name' className='w-full h-[60px] outline-none border-2 border-white bg-transparent text-white placeholder-gray-300 px-[20px] py-[20px] rounded-2xl text-[18px]' required onChange={(e)=> setName(e.target.value)} value={name}/>
         
        <input type='email' placeholder='Enter Your Email' className='w-full h-[60px] outline-none border-2 border-white bg-transparent text-white placeholder-gray-300 px-[20px] py-[20px] rounded-2xl text-[18px]' required onChange={(e)=> setEmail(e.target.value)} value={email}/>


        <div className='w-full h-[60px] border-2 border-white bg-transparent text-white rounded-2xl text-[18px] relative'>

             <input type={showPassword?"text":"password"} placeholder='Enter Your Password' className='w-full h-full outline-none   placeholder-gray-300 px-[20px] py-[20px] ' required onChange={(e)=> setPassword(e.target.value)} value={password}/>   

               {!showPassword &&
                <FaEye className='absolute top-[20px] right-[20px] text-white cursor-pointer' onClick={()=>setShowPassword(true)}/>
               }

                {showPassword &&
                <LuEyeClosed className='absolute top-[20px] right-[20px] text-white cursor-pointer' onClick={()=>setShowPassword(false)}/>
               }
               
        </div>
        
         {err.length > 0 && <p className='text-red-500'>*{err}</p>}

        <button className='min-w-[150px] h-[60px] mt-[13px] text-black font-semibold
         bg-white rounded-full text-[19px]' disabled={loading}>{loading?"Loading...":"Sign Up"}</button>


        <p className='text-[white] text-[18px] cursor-pointer' 
              onClick={()=>navigate("/signin")}>Already have an account ?
           <span className='text-blue-600'>  Sign In</span>
        </p>
     </form>
    </div>
  )
}

export default SignUp


import React, { createContext,useState, useEffect } from 'react'
import axios from 'axios'

export const UserDataContext = createContext()

function UserContext({ children }) {

    const serverUrl = "http://localhost:9090"
    const [userData, setUserData] = useState(null)

    const handelCurrentUser = async () => {
      try {
        const result = await axios.get(`${serverUrl}/api/v1/users/current`, {withCredentials:true});
        setUserData(result.data);
        console.log(result.data);
        
      } catch (error) {
         console.log(error); 
      }
    };

     useEffect(() => {
      handelCurrentUser();
     },[]);

    const value= {
        serverUrl,userData, setUserData
    };
  return (
        <UserDataContext.Provider value={value}>
           {children}
        </UserDataContext.Provider>
  );
}

export default UserContext;



import React, { useContext, useEffect } from 'react'
import { UserDataContext } from '../context/UserContext'
import { data, useNavigate } from 'react-router-dom'
import axios from 'axios'

function Home() {

  const {userData, serverUrl, setUserData,getGeminiResponse} = useContext(UserDataContext)
  const navigate = useNavigate()
  const handelLogOut = async ()=>{
    try {
      const result= await axios.get(`${serverUrl}/api/v1/auth/logout`, 
        {withCredentials:true})
        setUserData(null)
        navigate("/signin")
    } catch (error) {
      setUserData(null)
      console.log(error);
      
    }
  }


  const speak=(text)=>{
       if(!text) return;
       const utterance = new SpeechSynthesisUtterance(text);
       window.speechSynthesis.speak(utterance)
  };

  const handelCommand=(data)=> {
        const {type, userInput, response}=data
        speak(response);

        if (type === 'google_search'){
          const query = encodeURIComponent(userInput);
          window.open(`https://www.google.com/search?q=${query}`,
            '_blank');
        }
        if (type === 'youtube_search') {
            const query = encodeURIComponent(userInput);
            window.open(`https://www.youtube.com/results?search_query=${query}`, '_blank');
         }
        if (type === 'youtube_play') {
            const query = encodeURIComponent(userInput);
            window.open(`https://www.youtube.com/results?search_query=${query}`, '_blank');
          }

        if (type === 'settings_open') {
          alert("Opening device settings is not supported directly from the browser.");
         }

        if (type === 'music_open') {
          window.open('https://music.youtube.com/', '_blank');
        }

        if (type === 'camera_open') {
         alert("Camera access can’t be opened directly. Please use your device camera app.");
        }

        if (type === 'notes_open') {
         window.open('https://keep.google.com/', '_blank');
       }

        if (type === 'whatsapp_open') {
        window.open('https://web.whatsapp.com/', '_blank');
       }  

        if (type === 'gmail_open') {
         window.open('https://mail.google.com/', '_blank');
       }

        if (type === 'facebook_open') {
        window.open('https://www.facebook.com/', '_blank');
       }

        if (type === 'instagram_open') {
        window.open('https://www.instagram.com/', '_blank');
       }

       if (type === 'calculator_open') {
        window.open('https://www.google.com/search?q=calculator', '_blank');
       }
     }

  useEffect(()=>{

    if (!('webkitSpeechRecognition' in window || 'SpeechRecognition' in window)) {
      alert("Speech Recognition is not supported in this browser. Try Chrome or Edge.");
      return;
    }


    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
    const recognition = new SpeechRecognition();
    recognition.lang = 'en-US'
    recognition.continuous = true; // ✅ keeps listening after each result
    recognition.interimResults = false; // only get final results
 
    recognition.onstart = () => {
    console.log("🎤 Voice recognition started");
    };

    recognition.onresult= async(e)=>{
      const transcript = e.results[e.results.length - 1][0].transcript.trim()
      console.log("heard :" + transcript);
      
      if(transcript.toLowerCase().includes(userData.assistantName.toLowerCase())){
        const data = await getGeminiResponse(transcript)
        handelCommand(data)
      }
    } 
    recognition.start()
      
  },[])
  
  return (
    <div className='w-full h-[100vh] bg-gradient-to-t from-[black] to-[#04044b] flex justify-center items-center flex-col gap-[15px]'>

     <button
         className={`absolute min-w-[250px] h-[60px] mt-[13px] font-semibold top-[20px] right-[20px] rounded-3xl text-[19px] overflow-hidden transition-all duration-300
         bg-gradient-to-r from-green-400 via-teal-500 to-blue-600 text-white shadow-lg
         hover:scale-105 hover:shadow-2xl active:scale-95 disabled:opacity-60 disabled:cursor-not-allowed`}
         onClick={()=>navigate("/customize")}
         >Customize Your Assistant</button>
        
         <button
         className={`absolute min-w-[100px] h-[60px] mt-[13px] top-[100px] right-[20px] font-semibold rounded-3xl text-[19px] overflow-hidden transition-all duration-300
         bg-gradient-to-r from-green-400 via-teal-500 to-blue-600 text-white shadow-lg
         hover:scale-105 hover:shadow-2xl active:scale-95 disabled:opacity-60 disabled:cursor-not-allowed`}
         onClick={handelLogOut}
         >Log Out</button>

      <div className='w-[300px] h-[400px] flex justify-center items-center overflow-hidden rounded-4xl shadow-lg'>
         <img src={userData?.assistantImage} alt='' className='h-full object-cover'/>
      </div>
        <h1 className='text-green-400 text-[18px] font-serif'>I'm {userData?.assistantName}</h1>
    </div>
  )
}

export default Home;



  {/* 💬 current Conversation (shown only inside menu on small screens) */}
    <div className="w-full max-w-[500px] h-[180px] mt-8 overflow-y-auto bg-[#ffffff0d] rounded-2xl p-4 backdrop-blur-md shadow-inner">
      <h2 className="text-center text-white font-semibold mb-3">Conversation History</h2>
      {history.length === 0 ? (
        <p className="text-gray-400 text-center">No conversations yet...</p>
      ) : (
        <ul className="flex flex-col gap-2">
          {history.map((item, index) => (
            <li
              key={index}
              className={`text-sm px-3 py-2 rounded-xl ${
                item.role === "user"
                  ? "bg-green-600/30 text-green-300 self-end text-right"
                  : "bg-blue-600/30 text-blue-300 self-start text-left"
              }`}
            >
              <strong>{item.role === "user" ? "🧍You: " : "🤖 "}</strong>
              {item.text}
            </li>
          ))}
        </ul>
      )}
    </div>
    </div>
      )}

      {/* 💬 Current conversation (desktop) */}
      <div className="hidden lg:block w-full max-w-[600px] h-[180px] mt-8 overflow-y-auto bg-[#ffffff0d] rounded-2xl p-4 backdrop-blur-md shadow-inner">
        <h2 className="text-center text-white font-semibold mb-3">
          Current Conversation
        </h2>
        {history.length === 0 ? (
          <p className="text-gray-400 text-center">No conversations yet...</p>
        ) : (
          <ul className="flex flex-col gap-2">
            {history.map((item, index) => (
              <li
                key={index}
                className={`text-sm px-3 py-2 rounded-xl ${
                  item.role === "user"
                    ? "bg-green-600/30 text-green-300 text-right"
                    : "bg-blue-600/30 text-blue-300 text-left"
                }`}
              >
                <strong>
                  {item.role === "user" ? "🧍You: " : "🤖 "}
                </strong>
                {item.text}
              </li>
            ))}
          </ul>
        )}
      </div>
    

     {/* 💬 current Conversation (shown only inside menu on small screens) */}
    <div className="w-full max-w-[500px] h-[180px] mt-8 overflow-y-auto bg-[#ffffff0d] rounded-2xl p-4 backdrop-blur-md shadow-inner">
      <h2 className="text-center text-white font-semibold mb-3">Conversation History</h2>
      {history.length === 0 ? (
        <p className="text-gray-400 text-center">No conversations yet...</p>
      ) : (
        <ul className="flex flex-col gap-2">
          {history.map((item, index) => (
            <li
              key={index}
              className={`text-sm px-3 py-2 rounded-xl ${
                item.role === "user"
                  ? "bg-green-600/30 text-green-300 self-end text-right"
                  : "bg-blue-600/30 text-blue-300 self-start text-left"
              }`}
            >
              <strong>{item.role === "user" ? "🧍You: " : "🤖 "}</strong>
              {item.text}
            </li>
          ))}
        </ul>
      )}
    </div>

     {/* 💬 Current conversation (desktop) */}
      <div className="hidden lg:block w-full max-w-[600px] h-[180px] mt-8 overflow-y-auto bg-[#ffffff0d] rounded-2xl p-4 backdrop-blur-md shadow-inner">
        <h2 className="text-center text-white font-semibold mb-3">
          Current Conversation
        </h2>
        {history.length === 0 ? (
          <p className="text-gray-400 text-center">No conversations yet...</p>
        ) : (
          <ul className="flex flex-col gap-2">
            {history.map((item, index) => (
              <li
                key={index}
                className={`text-sm px-3 py-2 rounded-xl ${
                  item.role === "user"
                    ? "bg-green-600/30 text-green-300 text-right"
                    : "bg-blue-600/30 text-blue-300 text-left"
                }`}
              >
                <strong>
                  {item.role === "user" ? "🧍You: " : "🤖 "}
                </strong>
                {item.text}
              </li>
            ))}
          </ul>
        )}
      </div>